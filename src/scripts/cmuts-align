#!/bin/bash

set -eou pipefail
LOG="cmuts-align.log"

handler() {
    echo "Error occurred on line $1. Script exited early." >> "$LOG"
    echo "Error occurred on line $1. Script exited early. See $LOG for details." >&2
}

trap 'handler $LINENO' ERR

FASTA=""
OUTPUT=""
THREADS="1"
BARCODES=""
TRIM=""
FILES=()
PAIRS=()

print-usage() {
  echo "Usage: cmuts align --fasta FASTA --output OUTPUT [--barcodes BARCODES] [--trim ADAPTER] [FILES ...] [--pairs PAIRS ...]"
}

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -h|--help)
      print-usage
      exit 0
      ;;
    --fasta)
      shift
      FASTA="$1"
      ;;
    --output)
      shift
      OUTPUT="$1"
      ;;
    --threads)
      shift
      THREADS="$1"
      ;;
    --barcodes)
      shift
      BARCODES="$1"
      ;;
    --trim)
      shift
      TRIM="$1"
      ;;
    --pairs)
      shift
      while [[ "$#" -gt 0 && ! "$1" =~ ^-- ]]; do
        PAIRS+=("$1")
        shift
      done
      continue
      ;;
    *)
      FILES+=("$1")
      ;;
    esac
    shift
done

if [[ -z "$FASTA" || -z "$OUTPUT" || "${#FILES[@]}" -eq 0 ]]; then
  print-usage
  exit 1
fi

if [[ ${#PAIRS[@]} -gt 0 && ${#FILES[@]} -ne ${#PAIRS[@]} ]]; then
  echo "Error: If --pairs is specified, then there must be an equal amount as the number of files specified." >&2
  exit 1
fi

echo " -- cmuts align ($(date '+%d-%m-%Y %H:%M:%S')) -- " >> $LOG

# Convert to DNA before processing

TEMP_FASTA="${TMPDIR}/$(basename "${FASTA%.*}")-T.${FASTA##*.}"
sed '/^>/!s/U/T/g' "$FASTA" > "$TEMP_FASTA"
FASTA="$TEMP_FASTA"

# Trim if a sequence is provided

if [[ ! -z "$TRIM" ]]; then

  mkdir -p trimmed

  for FILE in "${FILES[@]}"; do

    NAME=$(basename "$FILE")
    BASENAME="${NAME%.fastq*}"

    cutadapt \
      -g "$TRIM" \
      -o "trimmed/$NAME" \
      "$FILE" >> $LOG 2>&1

  done

  FILES=("trimmed"/*.fastq*)

fi

# Demultiplex if a barcode file is provided

DMDIR="dmux"

if [[ ! -z "$BARCODES" ]]; then

  if [[ ${#PAIRS[@]} -gt 0 ]]; then

    for IX in "${!FILES[@]}"; do

      FILE="${FILES[IX]}"
      PAIR="${PAIRS[IX]}"

      echo >> $LOG
      echo " -- Demultiplexing $FILE and $PAIR --" >> $LOG

      ultraplex \
        -i "$FILE" \
        -i2 "$PAIR" \
        -b "$BARCODES" \
        -d "$DMDIR" \
        --dont_build_reference \
        --ignore_no_match >> $LOG 2>&1

    done

  else

    for FILE in "${FILES[@]}"; do

      echo >> $LOG
      echo " -- Demultiplexing $FILE --" >> $LOG

      ultraplex \
        -i "$FILE" \
        -b "$BARCODES" \
        -d "$DMDIR" \
        --dont_build_reference \
        --ignore_no_match >> $LOG 2>&1

    done

  fi

  # Rename to something simpler

  cd "$DMDIR"
  for file in *.fastq.gz; do
    mv $file ${file:20}
  done
  cd ..

  if [[ ${#PAIRS[@]} -gt 0 ]]; then
    FILES=("$DMDIR"/*_Fwd.fastq*)
    PAIRS=("$DMDIR"/*_Rev.fastq*)
  else
    FILES=("$DMDIR"/*.fastq*)
  fi

fi

# Build the index

IXDIR="index"
TMPDIR=".tmp"
INDEX="$IXDIR/index"
if [[ ! -e "$IXDIR" ]]; then
  echo " -- Building bowtie2 index --" >> $LOG
  mkdir index
  bowtie2-build --threads "$THREADS" "$FASTA" "$INDEX" >> $LOG 2>&1
fi

# Align all files
# The awk section is to prevent read names > 252
# (which samtools doesn't like)

mkdir -p "$TMPDIR" "$OUTPUT"

for IX in "${!FILES[@]}"; do

  FILE="${FILES[IX]}"
  NAME=$(basename "$FILE")
  BASENAME="${NAME%.fastq*}"

  if [[ ${#PAIRS[@]} -gt 0 ]]; then
    PAIR="${PAIRS[IX]}"
    FARGS=("-1" "$FILE" "-2" "$PAIR")
  else
    PAIR=""
    FARGS=("-U" "$FILE")
  fi

  TMP="${TMPDIR}/${BASENAME}_UNSORTED.sam"
  FINAL="${OUTPUT}/${BASENAME}.bam"

  echo >> $LOG
  echo " -- Aligning $NAME --" >> $LOG
  echo >> $LOG

  bowtie2 \
    "${FARGS[@]}" \
    --threads "$THREADS" \
    -x "$INDEX" \
    --dpad 30 \
    --maxins=800 \
    --ignore-quals \
    --local \
    --mp 3,1 \
    --rdg 5,1 \
    --rfg 5,1 2>> $LOG | \
  awk 'BEGIN{FS=OFS="\t"} {
    if($0 ~ /^@/) print $0
    else {
      if(length($1) > 250) $1 = substr($1, 1, 250)
      print $0
    }
  }' > "$TMP"

  echo >> $LOG
  echo " -- Sorting $TMP --" >> $LOG
  echo >> $LOG

  samtools sort --threads "$THREADS" -o "$FINAL" "$TMP" >> $LOG 2>&1

  echo >> $LOG
  echo " -- Sorted reads written to $FINAL --" >> $LOG
  echo >> $LOG

done

# Cleanup

rm -rf "$TMPDIR"
